(self.webpackChunkespresso=self.webpackChunkespresso||[]).push([[349],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5856:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var a=n(2122),o=n(9756),r=(n(7294),n(3905)),i=["components"],s={title:"Convergence testing"},c=void 0,l={unversionedId:"hands-on/convergence",id:"hands-on/convergence",isDocsHomePage:!1,title:"Convergence testing",description:"Convergence with cutoff energy using PWTK",source:"@site/docs/hands-on/convergence.md",sourceDirName:"hands-on",slug:"/hands-on/convergence",permalink:"/espresso/hands-on/convergence",editUrl:"https://github.com/pranabdas/espresso/blob/master/docs/hands-on/convergence.md",version:"current",frontMatter:{title:"Convergence testing"},sidebar:"docs",previous:{title:"SCF calculation",permalink:"/espresso/hands-on/scf"},next:{title:"Structure optimization",permalink:"/espresso/hands-on/structure-optimization"}},p=[{value:"Convergence with cutoff energy using PWTK",id:"convergence-with-cutoff-energy-using-pwtk",children:[]},{value:"Convergence test using UNIX shell script",id:"convergence-test-using-unix-shell-script",children:[]},{value:"Convergence test against number of k-points",id:"convergence-test-against-number-of-k-points",children:[]},{value:"Convergence against lattice constant",id:"convergence-against-lattice-constant",children:[]}],u={toc:p};function m(e){var t=e.components,s=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"convergence-with-cutoff-energy-using-pwtk"},"Convergence with cutoff energy using PWTK"),(0,r.kt)("p",null,"We can automate the previous self consistent calculation by varying a certain\nparameter. Say we want to check the total energy of the system for various\nvalues of ",(0,r.kt)("inlineCode",{parentName:"p"},"ecutwfc"),". We can do that by using ",(0,r.kt)("inlineCode",{parentName:"p"},"pwtk")," script."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/silicon/si_scf_ecutoff.pwtk"',title:'"src/silicon/si_scf_ecutoff.pwtk"'},'# load the pw.x input from file\nload_fromPWI si_scf.in\n\n# open a file for writing resulting total energies\nset fid [open etot_vs_ecutwfc.dat w]\n\n# loop over different "ecut" values\nforeach ecut { 12 16 20 24 28 32 } {\n\n    # name of I/O files: $name.in & $name.out\n    set name si_scf_ecutwfc-$ecut\n\n    # set the pw.x "ecutwfc" variable\n    SYSTEM "ecutwfc = $ecut"\n\n    # run the pw.x calculation\n    runPW $name.in\n\n    # extract the "total energy" and write it to file\n    set Etot [::pwtk::pwo::totene $name.out]\n    puts $fid "$ecut $Etot"\n}\n\nclose $fid\n')),(0,r.kt)("p",null,"To run the above script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pwtk si_scf_ecutoff.pwtk\n")),(0,r.kt)("p",null,"Now we can plot the total energy with respect to ecutwfc. The data is in\n",(0,r.kt)("inlineCode",{parentName:"p"},"etot-vs-ecutwfc.dat")),(0,r.kt)("p",null,"We will use matplotlib to make the plots. Here is the python code for plotting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="notebooks/si-plots.ipynb"',title:'"notebooks/si-plots.ipynb"'},"import matplotlib.pyplot as plt\nfrom matplotlib import rcParamsDefault\nimport numpy as np\n%matplotlib inline\nplt.rcParams[\"figure.dpi\"]=150\nplt.rcParams[\"figure.facecolor\"]=\"white\"\n\nx, y = np.loadtxt('../src/silicon/etot-vs-ecutwfc.dat', delimiter=' ', unpack=True)\nplt.plot(x, y, \"o-\", markersize=5, label='Etot vs ecutwfc')\nplt.xlabel('ecutwfc (Ry)')\nplt.ylabel('Etot (Ry)')\nplt.legend(frameon=False)\nplt.show()\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Etot-vs-ecutwfc",src:n(1862).Z})),(0,r.kt)("h2",{id:"convergence-test-using-unix-shell-script"},"Convergence test using UNIX shell script"),(0,r.kt)("p",null,"We can do the convergence test with various parameters. We can calculate the\ntotal energy of the system by varying various parameters. We will use the shell\nscript to automate the process with different cutoff energy values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/silicon/si_script.sh"',title:'"src/silicon/si_script.sh"'},"#!/bin/sh\nNAME=\"ecut\"\n\nfor CUTOFF in  10 15 20 25 30 35 40\ndo\ncat > ${NAME}_${CUTOFF}.in << EOF\n\n&control\ncalculation = 'scf',\nprefix = 'silicon'\noutdir = './tmp/'\npseudo_dir = './pseudos/'\n/\n\n&system\nibrav =  2,\ncelldm(1) = 10.0,\nnat =  2,\nntyp = 1,\necutwfc = $CUTOFF\n/\n\n&electrons\nmixing_beta = 0.6\n/\n\nATOMIC_SPECIES\n Si 28.086  Si.pz-vbc.UPF\n\nATOMIC_POSITIONS (alat)\n Si 0.0 0.0 0.0\n Si 0.25 0.25 0.25\n\nK_POINTS (automatic)\n  6 6 6 1 1 1\nEOF\n\npw.x < ${NAME}_${CUTOFF}.in > ${NAME}_${CUTOFF}.out\necho ${NAME}_${CUTOFF}\ngrep ! ${NAME}_${CUTOFF}.out\n\ndone\n")),(0,r.kt)("p",null,"Make sure the file has executable permission for the user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"chmod 700 si_script.sh\n")),(0,r.kt)("p",null,"Run the script file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./si_script.sh\n# or\nsh si_script.sh\n")),(0,r.kt)("p",null,"We can plot the energy vs cut off energy, and choose a reasonable value."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"I had initially problem is running the script in macOS. The problem occurred\nbecause the script file format was set to DOS. The file format can be checked in\nfollowing way:"),(0,r.kt)("p",{parentName:"div"},"Open the file in ",(0,r.kt)("strong",{parentName:"p"},"vi")," editor. ",(0,r.kt)("inlineCode",{parentName:"p"},"vi si_script.sh")," Now in ",(0,r.kt)("strong",{parentName:"p"},"vi")," editor command\nmode (ESC key), type ",(0,r.kt)("inlineCode",{parentName:"p"},":set ff?")," This would tell you the file format. Now to\nchange file format, use the  command ",(0,r.kt)("inlineCode",{parentName:"p"},":set fileformat=unix")))),(0,r.kt)("h2",{id:"convergence-test-against-number-of-k-points"},"Convergence test against number of k-points"),(0,r.kt)("p",null,"We can run similar convergence test against other parameter, and choose the best\nvalue of that particular parameter. Here we will try to calculate number of\nk-points in the Monkhorst-Pack mesh."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/silicon/si_scf_kpoints.pwtk"',title:'"src/silicon/si_scf_kpoints.pwtk"'},'load_fromPWI si_scf.in\n\nset fid [open etot-vs-kpoint.dat w]\n\nforeach k { 2 4 6 8 } {\n\n    set name si_scf_kpoints-$k\n\n    K_POINTS automatic "$k $k $k 1 1 1"\n    runPW $name.in\n\n    set Etot [::pwtk::pwo::totene $name.out]\n    puts $fid "$k $Etot"\n}\n\nclose $fid\n')),(0,r.kt)("p",null,"Run pwtk program:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pwtk si_scf_kpoints.pwtk\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="notebooks/silicon-scf.ipynb"',title:'"notebooks/silicon-scf.ipynb"'},"x, y = np.loadtxt('../src/silicon/etot-vs-kpoint.dat', delimiter=' ', unpack=True)\nplt.plot(x, y, \"o-\", markersize=5, label='Etot vs kpoints')\nplt.xlabel('# kpoints')\nplt.ylabel('Etot (Ry)')\nplt.legend(frameon=False)\nplt.show()\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Etot-vs-kpoints",src:n(3927).Z})),(0,r.kt)("h2",{id:"convergence-against-lattice-constant"},"Convergence against lattice constant"),(0,r.kt)("p",null,"Calculating total energy with respect to varying lattice constant."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/silicon/si_scf_alat.pwtk"',title:'"src/silicon/si_scf_alat.pwtk"'},'load_fromPWI si_scf.in\n\n# please uncomment & insert value as determined in the "ecutwfc" exercise\nSYSTEM { ecutwfc = 30 }\n\n# please uncomment & insert values as determined in the "kpoints" exercise\nK_POINTS automatic { 6 6 6 1 1 1 }\n\n\nset fid [open etot-vs-alat.dat w]\n\nforeach alat { 9.7 9.8 9.9 10.0 10.1 10.2 10.3 10.4 10.5 10.6 10.7 } {\n\n    set name si_scf_alat-$alat\n\n    SYSTEM "celldm(1) = $alat"\n    runPW $name.in\n\n    set Etot [::pwtk::pwo::totene $name.out]\n    puts $fid "$alat $Etot"\n}\n\nclose $fid\n')),(0,r.kt)("p",null,"Run above code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pwtk si_scf_alat.pwtk\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="notebooks/silicon-scf.ipynb"',title:'"notebooks/silicon-scf.ipynb"'},"x, y = np.loadtxt('../src/silicon/etot-vs-alat.dat', delimiter=' ', unpack=True)\nplt.plot(x, y, \"o-\", markersize=5, label='Etot vs alat')\nplt.xlabel('alat (Bohr)')\nplt.ylabel('Etot (Ry)')\nplt.legend(frameon=False)\nplt.show()\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Etot-vs-alat",src:n(3294).Z})))}m.isMDXComponent=!0},3294:function(e,t,n){"use strict";t.Z=n.p+"assets/images/Etot-vs-alat-7c9003bf8d492a4ce692a57260181a9b.png"},1862:function(e,t,n){"use strict";t.Z=n.p+"assets/images/etot-vs-ecutwfc-b7408d04175ded7a80e8070b2466faa3.png"},3927:function(e,t,n){"use strict";t.Z=n.p+"assets/images/etot-vs-kpoints-70be9122fc1dc1613ee4b46a8733fb1f.png"}}]);