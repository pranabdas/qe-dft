(self.webpackChunkespresso=self.webpackChunkespresso||[]).push([[198],{3905:function(n,e,t){"use strict";t.d(e,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},l=Object.keys(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var o=a.createContext({}),c=function(n){var e=a.useContext(o),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(o.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,o=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||l;return t?a.createElement(f,s(s({ref:e},u),{},{components:t})):a.createElement(f,s({ref:e},u))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=n,i.mdxType="string"==typeof n?n:r,s[1]=i;for(var c=2;c<l;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},172:function(n,e,t){"use strict";t.r(e),t.d(e,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=t(2122),r=t(9756),l=(t(7294),t(3905)),s=["components"],i={title:"DOS and bandstructure for Aluminum (metal)",sidebar_label:"Al (metal)"},o=void 0,c={unversionedId:"hands-on/aluminum",id:"hands-on/aluminum",isDocsHomePage:!1,title:"DOS and bandstructure for Aluminum (metal)",description:"Variable cell relaxation",source:"@site/docs/hands-on/aluminum.md",sourceDirName:"hands-on",slug:"/hands-on/aluminum",permalink:"/espresso/hands-on/aluminum",editUrl:"https://github.com/pranabdas/espresso/blob/master/docs/hands-on/aluminum.md",version:"current",frontMatter:{title:"DOS and bandstructure for Aluminum (metal)",sidebar_label:"Al (metal)"},sidebar:"docs",previous:{title:"Bandstructure",permalink:"/espresso/hands-on/bands"},next:{title:"P-DOS",permalink:"/espresso/hands-on/pdos"}},u=[{value:"Variable cell relaxation",id:"variable-cell-relaxation",children:[]},{value:"Self consistent field (SCF) calculation",id:"self-consistent-field-scf-calculation",children:[]},{value:"Non-self consistent field calculation",id:"non-self-consistent-field-calculation",children:[]},{value:"Density of states",id:"density-of-states",children:[]},{value:"Bandstructure calculation",id:"bandstructure-calculation",children:[]},{value:"Importance of smearing in convergence",id:"importance-of-smearing-in-convergence",children:[]}],p={toc:u};function d(n){var e=n.components,i=(0,r.Z)(n,s);return(0,l.kt)("wrapper",(0,a.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"variable-cell-relaxation"},"Variable cell relaxation"),(0,l.kt)("p",null,"First we are going to relax the cell and choose appropriate lattice constant for\nour chosen pseudo potential. In case of metals, it is important to provide\nsmearing parameters in the input file."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/al/al_relax.in"',title:'"src/al/al_relax.in"'},"&CONTROL\n  calculation= 'vc-relax',\n  prefix= 'al',\n  outdir= './tmp/'\n  pseudo_dir = './'\n  etot_conv_thr= 1e-6,\n  forc_conv_thr= 1e-5\n/\n\n&SYSTEM\n  ibrav=  2,\n  celldm(1)= 7.652,\n  nat=  1,\n  ntyp= 1,\n  ecutwfc = 50,\n  ecutrho= 500,\n  occupations= 'smearing',\n  smearing= 'gaussian',\n  degauss= 0.01\n/\n\n&ELECTRONS\n  conv_thr= 1e-8\n/\n\n&IONS\n/\n\n&CELL\n  cell_dofree= 'ibrav'\n/\n\nATOMIC_SPECIES\n  Al 26.981539 Al.pbe-n-rrkjus_psl.1.0.0.UPF\n\nATOMIC_POSITIONS (alat)\n  Al 0.00 0.00 0.00\n\nK_POINTS (automatic)\n  10 10 10 0 0 0\n")),(0,l.kt)("p",null,"We run ",(0,l.kt)("inlineCode",{parentName:"p"},"pw.x")," to perform variable cell relaxation calculation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pw.x < al_vc_relax.in > al_vc_relax.out\n")),(0,l.kt)("p",null,"Now you may open the output file in ",(0,l.kt)("strong",{parentName:"p"},"vi")," editor and invoke search by pressing\n",(0,l.kt)("inlineCode",{parentName:"p"},"/")," and type ",(0,l.kt)("em",{parentName:"p"},"Final enthalpy")," You will find the final lattice parameters below\nit."),(0,l.kt)("h2",{id:"self-consistent-field-scf-calculation"},"Self consistent field (SCF) calculation"),(0,l.kt)("p",null,"We obtain relaxed lattice constant = 7.652 * 0.498611683 / 0.5 = 7.63075 Bohr.\nWe will use this value for our next step, self consistent calculation."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/al/al_scf.in"',title:'"src/al/al_scf.in"'},"&CONTROL\n  calculation= 'scf',\n  restart_mode= 'from_scratch',\n  prefix= 'al',\n  outdir= './tmp/',\n  pseudo_dir= './'\n/\n\n&SYSTEM\n  ibrav= 2,\n  celldm(1) = 7.63075,\n  nat= 1,\n  ntyp= 1,\n  ecutwfc= 50,\n  ecutrho= 500,\n  occupations= 'smearing',\n  smearing= 'gaussian',\n  degauss= 0.01\n/\n\n&ELECTRONS\n  conv_thr= 1e-8\n/\nATOMIC_SPECIES\n  Al 26.981539 Al.pbe-n-rrkjus_psl.1.0.0.UPF\n\nATOMIC_POSITIONS (alat)\n  Al 0.00 0.00 0.00\n\nK_POINTS (automatic)\n  10 10 10 0 0 0\n")),(0,l.kt)("p",null,"We run our self consistent calculation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pw.x < al_scf.in > al_scf.out\n")),(0,l.kt)("h2",{id:"non-self-consistent-field-calculation"},"Non-self consistent field calculation"),(0,l.kt)("p",null,"Inspect the output file, and let's proceed to next step non-self consistent\ncalculation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/al/al_nscf.in"',title:'"src/al/al_nscf.in"'},"&CONTROL\n  calculation= 'nscf',\n  restart_mode= 'from_scratch',\n  prefix= 'al',\n  outdir= './tmp/',\n  pseudo_dir= './'\n/\n\n&SYSTEM\n  ibrav= 2,\n  celldm(1) = 7.63075,\n  nat= 1,\n  ntyp= 1,\n  ecutwfc= 50,\n  ecutrho= 500,\n  occupations= 'smearing',\n  smearing= 'gaussian',\n  degauss= 0.01\n/\n\n&ELECTRONS\n  conv_thr= 1e-8\n/\n\nATOMIC_SPECIES\n  Al 26.981539 Al.pbe-n-rrkjus_psl.1.0.0.UPF\n\nATOMIC_POSITIONS (alat)\n  Al 0.00 0.00 0.00\n\nK_POINTS (automatic)\n  40 40 40 0 0 0\n")),(0,l.kt)("p",null,"Note the changes in input file. The calculation changed to ",(0,l.kt)("inlineCode",{parentName:"p"},"nscf")," and we are now\nusing a higher number of k-points grid."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pw.x < al_nscf.in > al_nscf.out\n")),(0,l.kt)("h2",{id:"density-of-states"},"Density of states"),(0,l.kt)("p",null,"Next we go ahead with our density of states calculation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/al/al_dos.in"',title:'"src/al/al_dos.in"'},"&DOS\n  prefix= 'al',\n  outdir= './tmp/',\n  fildos= 'al_dos.dat',\n  emin= -10,\n  emax= 35\n/\n")),(0,l.kt)("p",null,"We run ",(0,l.kt)("inlineCode",{parentName:"p"},"dos.x")," with DOS inputs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"dos.x < al_dos.in > al_dos.out\n")),(0,l.kt)("p",null,"Note from our ",(0,l.kt)("inlineCode",{parentName:"p"},"al_nscf.out")," that our Fermi energy is at 7.9421 eV. We plot our\ndensity of states:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Al-DOS",src:t(612).Z})),(0,l.kt)("h2",{id:"bandstructure-calculation"},"Bandstructure calculation"),(0,l.kt)("p",null,"We prepare the input file the same as the case of our previous example silicon:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/al/al_bands.in"',title:'"src/al/al_bands.in"'},"&CONTROL\n  calculation= 'bands',\n  restart_mode= 'from_scratch',\n  prefix= 'al',\n  outdir= './tmp/',\n  pseudo_dir= './'\n/\n\n&SYSTEM\n  ibrav= 2,\n  celldm(1) = 7.63075,\n  nat= 1,\n  ntyp= 1,\n  ecutwfc= 50,\n  ecutrho= 500,\n  occupations= 'smearing',\n  smearing= 'gaussian',\n  degauss= 0.01\n/\n\n&ELECTRONS\n  conv_thr= 1e-8\n/\n\nATOMIC_SPECIES\n  Al 26.981539 Al.pbe-n-rrkjus_psl.1.0.0.UPF\n\nATOMIC_POSITIONS (alat)\n  Al 0.00 0.00 0.00\n\nK_POINTS {crystal_b}\n5\n  00.000 0.500 00.000 20  !L\n  00.000 0.000 00.000 30  !G\n  -0.500 0.000 -0.500 10  !X\n  -0.375 0.250 -0.375 30  !U\n  00.000 0.000 00.000 20  !G\n")),(0,l.kt)("p",null,"Followed by run ",(0,l.kt)("inlineCode",{parentName:"p"},"pw.x"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pw.x < al_bands.in > al_bands.out\n")),(0,l.kt)("p",null,"Now we proceed with post-processing:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="src/al/al_bands_pp.in"',title:'"src/al/al_bands_pp.in"'},"&BANDS\n  prefix = 'al'\n  outdir = './tmp/'\n  filband = 'al_bands.dat'\n/\n")),(0,l.kt)("p",null,"And run ",(0,l.kt)("inlineCode",{parentName:"p"},"bands.x"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"bands.x < al_bands_pp.in > al_bands_pp.out\n")),(0,l.kt)("p",null,"We obtain the following bandstructure:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Bandstructure-Al",src:t(8402).Z})),(0,l.kt)("h2",{id:"importance-of-smearing-in-convergence"},"Importance of smearing in convergence"),(0,l.kt)("p",null,"Here we will test the convergence using PWTK against number of k-points, three\ndifferent smearing functions (Gauss, Methfessel-Paxton, and Marzari-Vanderbilt),\nand for various smearing values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"pwtk al.degauss.pwtk\n")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"convergence against smearing-Al",src:t(8499).Z})),(0,l.kt)("p",null,"We see that the ",(0,l.kt)("inlineCode",{parentName:"p"},"m-v")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"m-p")," broadening allow for faster and smother\nconvergence while depending less on ",(0,l.kt)("inlineCode",{parentName:"p"},"degauss")," value than Gaussian broadening.\nThe number suffix next to the legend labels are number of uniform k-points in\nMonkhorst-Plank grid."))}d.isMDXComponent=!0},8402:function(n,e,t){"use strict";e.Z=t.p+"assets/images/al-bands-80a59f979dc76cc93a8a3f0098e552db.png"},612:function(n,e,t){"use strict";e.Z=t.p+"assets/images/al-dos-1a1a20854f28a36239168339111e6b9e.png"},8499:function(n,e,t){"use strict";e.Z=t.p+"assets/images/al-smearing-5ed252d6a01bf986d7bbebf6226b6feb.png"}}]);